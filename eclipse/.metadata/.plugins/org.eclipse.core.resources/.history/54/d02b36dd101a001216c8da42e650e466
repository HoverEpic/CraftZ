package me.JangoBrick.CraftZ;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

import me.JangoBrick.CraftZ.Listeners.*;

public class CraftZ extends JavaPlugin {
	
	public void onEnable() {
		
		//Load config part
		loadConfig();
		
		//Load event part
		registerEvents();
		
		System.out.println("++=========================================++");
		System.out.println("||  [CraftZ] Plugin by JangoBrick.         ||");
		System.out.println("||  [CraftZ] Plugin successfully enabled.  ||");
		System.out.println("++=========================================++");
		
		
		
		//Zombies faster
		
		try {
		    @SuppressWarnings("rawtypes")
		    Class[] args = new Class[3];
		    args[0] = Class.class;
		    args[1] = String.class;
		    args[2] = int.class;
		    Method a = net.minecraft.server.EntityTypes.class.getDeclaredMethod("a", args);
		    a.setAccessible(true);
		    a.invoke(a, Zombie.class, "Zombie", 54);
		} catch (Exception e) {
		    e.printStackTrace();
		    this.setEnabled(false);
		}
		
		
		
		//Spawn function
		
		registerZombieSpawner();
		
		int value_zombies_spawninterval = this.getConfig().getInt("Config.mobs.zombies.spawning.interval");
		long zombies_spawninterval = (long) value_zombies_spawninterval * 20;
		
		this.getServer().getScheduler().scheduleAsyncRepeatingTask(this, new Runnable() {
			
			public void run() {
				spawnZombie();
			}
			
		}, zombies_spawninterval, zombies_spawninterval);
		
		
		
		//Chest refill function
		
		registerChestRefiller();
				
		this.getServer().getScheduler().scheduleAsyncRepeatingTask(this, new Runnable() {
					
			public void run() {
				refillChests();
			}
					
		}, 20L, 20L);

		
		
	}
	
	
	
	
	public void onDisable() {
		
		
		
	}
	
	
	
	
	public boolean onCommand(CommandSender sender, Command cmd, String cmdlabel, String[] args) {
		
		if (cmd.getName().equalsIgnoreCase("craftz")) {
			
			if (args.length == 0) {
				
				if (sender.hasPermission("craftz.help")) {
					String value_craftz_helptitle = this.getConfig().getString("Config.messages.help.title");
					sender.sendMessage(ChatColor.YELLOW + value_craftz_helptitle);
					sender.sendMessage("");
					String value_craftz_help_main = this.getConfig().getString("Config.messages.help.help-command");
					sender.sendMessage(ChatColor.YELLOW + value_craftz_help_main);
					//if (sender.hasPermission("craftz.addzombiespawn")) {
					//	String value_craftz_help_addzs = this.getConfig().getString("Config.messages.help.addzombiespawn-command");
					//	sender.sendMessage(ChatColor.YELLOW + value_craftz_help_addzs);
					//}
					//if (sender.hasPermission("craftz.setchest")) {
					//	String value_craftz_help_setcst = this.getConfig().getString("Config.messages.help.setchest-command");
					//	sender.sendMessage(ChatColor.YELLOW + value_craftz_help_setcst);
					//}
					if (sender.hasPermission("craftz.removeitems")) {
						String value_craftz_help_rmi = this.getConfig().getString("Config.messages.help.removeitems-command");
						sender.sendMessage(ChatColor.YELLOW + value_craftz_help_rmi);
					}
				}
				
				return true;
				
			}
			
			
			
			
			if (args.length > 0) {					
				
				if (args[0].equalsIgnoreCase("setzombiespawn") || args[0].equalsIgnoreCase("setzs")) {
					
					if (!(sender instanceof Player)) {
						String value_error_mustBePlayer = this.getConfig().getString("Config.messages.errors.mustBePlayer");
						sender.sendMessage(value_error_mustBePlayer);
						return true;
					}
					
					if (sender.hasPermission("craftz.addzombiespawn")) {
						if (args.length != 2) {
							String value_error_tooFewArgs = this.getConfig().getString("Config.messages.errors.tooFewArguments");
							sender.sendMessage(value_error_tooFewArgs);
							return true;
						}
					
						Location playerLocation = this.getServer().getPlayer(sender.getName()).getLocation();
						int playerX = playerLocation.getBlockX();
						int playerY = playerLocation.getBlockY();
						int playerZ = playerLocation.getBlockZ();
						
						String path_spawnpoint_toAdd = "Spawnpoints.zombies." + args[1];
						String path_spawnpoint_toAdd_coords = path_spawnpoint_toAdd + ".coords";
						
						this.getConfig().set(path_spawnpoint_toAdd_coords + ".x", playerX);
						this.getConfig().set(path_spawnpoint_toAdd_coords + ".y", playerY);
						this.getConfig().set(path_spawnpoint_toAdd_coords + ".z", playerZ);
						
						
						this.saveConfig();
					}
					
				}
				
				
				
				if (args[0].equalsIgnoreCase("setchest")) {
					
					if (!(sender instanceof Player)) {
						String value_error_mustBePlayer = this.getConfig().getString("Config.messages.errors.mustBePlayer");
						sender.sendMessage(value_error_mustBePlayer);
						return true;
					}
					
					if (sender.hasPermission("craftz.setchest")) {
						
						this.getConfig().set("PlayerData." + sender.getName() + ".setchest-enabled", true);
						this.getConfig().options().copyDefaults(true);
						this.saveConfig();
						
						String value_cmd_setchest_activated = this.getConfig().getString("Config.messages.cmd.setchest-activated");
						sender.sendMessage("[CraftZ] " + value_cmd_setchest_activated);
						
					}
					
				}
				
				
				
				if (args[0].equalsIgnoreCase("removeitems") || args[0].equalsIgnoreCase("remitems")) {
					if (sender.hasPermission("craftz.removeitems")) {
						
						int craftz_removed_items = 0;
						List<Entity> craftz_entities = this.getServer().getWorld("craftz").getEntities();
						for (int i=0; i<craftz_entities.toArray().length; i++) {
							Entity craftz_entity_ = craftz_entities.get(i);
							if (craftz_entity_.getType() == EntityType.DROPPED_ITEM) {
								craftz_entity_.remove();
								craftz_removed_items++;
							}
						}
						
						String value_cmd_removedItems = this.getConfig().getString("Config.messages.cmd.removed-items");
						value_cmd_removedItems = value_cmd_removedItems.replaceAll("%i", "" + ChatColor.BLUE + craftz_removed_items + ChatColor.RESET);
						sender.sendMessage("[CraftZ] " + value_cmd_removedItems);
						
					}
				}
				
				
				return true;
					
			}
				
				
				
		}
			
		
		
		return true;
		
	}
	
	
	
	
	private void loadConfig() {
		
		// HEADER SETZEN
		
		this.getConfig().options().header(  "++===================================================++"
								 		+ "\n|| Configuration for the CraftZ plugin by JangoBrick ||"
								 		+ "\n++===================================================++"
		);
		
		// CONFIG
		
			// WORLD
			
				// WEATHER
				
				String path_weatherChanging_allow = "Config.world.weather.allowWeatherChanging";
				this.getConfig().addDefault(path_weatherChanging_allow, false);
				
			// PLAYERS
			
				// INTERACT
				
				String path_shearing_allow = "Config.players.interact.shearing";
				this.getConfig().addDefault(path_shearing_allow, false);
				
				String path_sleeping_allow = "Config.players.interact.sleeping";
				this.getConfig().addDefault(path_sleeping_allow, false);
				
					// BLOCKS
					
					String path_blockBreaking_allow = "Config.players.interact.block-breaking";
					this.getConfig().addDefault(path_blockBreaking_allow, false);
					
					String path_blockPlacing_allow = "Config.players.interact.block-placing";
					this.getConfig().addDefault(path_blockPlacing_allow, false);
					
					String path_blockPlacing_spiderweb_allow = "Config.players.interact.allow-spiderweb-placing";
					this.getConfig().addDefault(path_blockPlacing_spiderweb_allow, true);
				
				// MEDICAL
				
				String path_enableSugarEffect = "Config.players.medical.enable-sugar-speed-effect";
				this.getConfig().addDefault(path_enableSugarEffect, true);
			
			// WEAPONS
			
				// M136 (rocket launcher)
				
				String path_enableM136 = "Config.weapons.M136-RocketLauncher.enable";
				this.getConfig().addDefault(path_enableM136, true);
				
				String path_M136_radius = "Config.weapons.M136-RocketLauncher.damage-radius";
				this.getConfig().addDefault(path_M136_radius, 40);
				
				String path_M136_blockDamage = "Config.weapons.M136-RocketLauncher.block-damage";
				this.getConfig().addDefault(path_M136_blockDamage, false);
				
				String path_M136_blockDamageRadius = "Config.weapons.M136-RocketLauncher.block-damage-power";
				this.getConfig().addDefault(path_M136_blockDamageRadius, 3);
				
			// CHESTS
			
				// REFILL
				
				String path_chestsRefillTime_min = "Config.chests.refill-time.min";
				this.getConfig().addDefault(path_chestsRefillTime_min, 30);
				
				String path_chestsRefillTime_max = "Config.chests.refill-time.max";
				this.getConfig().addDefault(path_chestsRefillTime_max, 360);
			
			// MOBS
			
				// ZOMBIES
				
					// DROPS
					
					String path_zombies_drops_enable = "Config.mobs.zombies.enable-drops";
					this.getConfig().addDefault(path_zombies_drops_enable, true);
					
					String path_zombies_drops_chance = "Config.mobs.zombies.drops.chance";
					this.getConfig().addDefault(path_zombies_drops_chance, 0.3);
					
					String path_zombies_drops_rf = "Config.mobs.zombies.drops.rottenflesh";
					this.getConfig().addDefault(path_zombies_drops_rf, true);
					
					String path_zombies_drops_arrows = "Config.mobs.zombies.drops.arrows";
					this.getConfig().addDefault(path_zombies_drops_arrows, true);
					
					// SPAWNING
					
						// INTERVAL
						
						String path_zombies_spawninterval = "Config.mobs.zombies.spawning.interval";
						this.getConfig().addDefault(path_zombies_spawninterval, 10);
						
						// MAXZOMBIES
						
						String path_zombies_spawnmax = "Config.mobs.zombies.spawning.maxZombies";
						this.getConfig().addDefault(path_zombies_spawnmax, 200);
				
				// ANIMALS
				
					// SPAWNS
					
					String path_animalspawns_enable = "Config.mobs.animals.spawning.enable";
					this.getConfig().addDefault(path_animalspawns_enable, true);
					
						// CHANCE
						
						String path_animalspawns_chance_cow = "Config.mobs.animals.spawning.chance.cow";
						this.getConfig().addDefault(path_animalspawns_chance_cow, 0.3);
						
						String path_animalspawns_chance_chicken = "Config.mobs.animals.spawning.chance.chicken";
						this.getConfig().addDefault(path_animalspawns_chance_chicken, 0.3);
						
						String path_animalspawns_chance_pig = "Config.mobs.animals.spawning.chance.pig";
						this.getConfig().addDefault(path_animalspawns_chance_pig, 0.3);
						
						String path_animalspawns_chance_sheep = "Config.mobs.animals.spawning.chance.sheep";
						this.getConfig().addDefault(path_animalspawns_chance_sheep, 0.3);
					
			// CHAT
		
			String path_modifyJoinQuitMessages = "Config.chat.modify-join-and-quit-messages";
			this.getConfig().addDefault(path_modifyJoinQuitMessages, true);
			
			String path_modifyPlayerMessages = "Config.chat.modify-player-messages";
			this.getConfig().addDefault(path_modifyPlayerMessages, false);
			
			String path_modifyDeathMessages = "Config.chat.modify-death-messages";
			this.getConfig().addDefault(path_modifyDeathMessages, true);
		
			// MESSAGES
			
				// HELP
				
				String path_craftz_helptitle = "Config.messages.help.title";
				this.getConfig().addDefault(path_craftz_helptitle, "=== CraftZ Help ===");
				
				String path_craftz_help_main = "Config.messages.help.help-command";
				this.getConfig().addDefault(path_craftz_help_main, "/craftz: Displays this help menu.");
				
				String path_craftz_help_rmi = "Config.messages.help.removeitems-command";
				this.getConfig().addDefault(path_craftz_help_rmi, "/craftz removeitems: Removes all items in the world. (Alias: /craftz remitems)");
				
				// COMMAND
				
				String path_cmd_setchest_activated = "Config.messages.cmd.setchest-activated";
				this.getConfig().addDefault(path_cmd_setchest_activated, "SetChest mode enabled. Now right-click a chest to add it.");
				
				String path_cmd_removedItems = "Config.messages.cmd.removed-items";
				this.getConfig().addDefault(path_cmd_removedItems, "Removed %i items.");
				
				// ERRORS
				
				String path_error_mustBePlayer = "Config.messages.errors.mustBePlayer";
				this.getConfig().addDefault(path_error_mustBePlayer, "You must be a player to use this command.");
				
				String path_error_tooFewArgs = "Config.messages.errors.tooFewArguments";
				this.getConfig().addDefault(path_error_tooFewArgs, "Too few arguments given.");
		
		
		
		
		
		this.getConfig().options().copyDefaults(true);
		this.saveConfig();
		
	}
	
	
	
	
	@SuppressWarnings("unused")
	private String getWithColors(String text) {
		
		text = text.replaceAll("&a", ChatColor.GREEN + "");
		text = text.replaceAll("&b", ChatColor.AQUA + "");
		text = text.replaceAll("&c", ChatColor.RED + "");
		text = text.replaceAll("&d", ChatColor.LIGHT_PURPLE + "");
		text = text.replaceAll("&e", ChatColor.YELLOW + "");
		text = text.replaceAll("&f", ChatColor.WHITE + "");
		
		text = text.replaceAll("&0", ChatColor.BLACK + "");
		text = text.replaceAll("&1", ChatColor.DARK_BLUE + "");
		text = text.replaceAll("&2", ChatColor.DARK_GREEN + "");
		text = text.replaceAll("&3", ChatColor.DARK_AQUA + "");
		text = text.replaceAll("&4", ChatColor.DARK_RED + "");
		text = text.replaceAll("&5", ChatColor.DARK_PURPLE + "");
		text = text.replaceAll("&6", ChatColor.GOLD + "");
		text = text.replaceAll("&7", ChatColor.GRAY + "");
		text = text.replaceAll("&8", ChatColor.DARK_GRAY + "");
		text = text.replaceAll("&9", ChatColor.BLUE + "");
		
		text = text.replaceAll("&r", ChatColor.RESET + "");
		text = text.replaceAll("&k", ChatColor.MAGIC + "");
		text = text.replaceAll("&l", ChatColor.BOLD + "");
		
		return text;
		
	}
	
	
	
	
	
	
	// Event-Teil
	private void registerEvents() {
		
		// PLAYER
		new CraftZPlayerInteractListener(this);
		new CraftZPlayerJoinListener(this);
		new CraftZPlayerQuitListener(this);
		new CraftZShearEntityListener(this);
		new CraftZPlayerMoveListener(this);
		new CraftZPlayerBedEnterListener(this);
		new CraftZAsyncPlayerChatListener(this);
		new CraftZPlayerDeathListener(this);
		new CraftZPlayerDropItemListener(this);
		new CraftZEntityShootBowListener(this);
		
		// CREATURE
		new CraftZCreatureSpawnListener(this);
		new CraftZEntityDamageListener(this);
		new CraftZEntityDeathListener(this);
		new me.JangoBrick.CraftZ.Listeners.CraftZZombieSpawnListener(this);
		new CraftZSheepDyeWoolListener(this);
		new CraftZEntityTargetLivingEntityListener(this);
		
		// ITEM
		new CraftZItemDespawnListener(this);
		
		// ENTITY
		new CraftZProjectileHitListener(this);
		new CraftZEntityExplodeListener(this);
		
		// BLOCK
		new CraftZBlockBreakListener(this);
		new CraftZBlockPlaceListener(this);
		new CraftZPaintingBreakListener(this);
		new CraftZPaintingBreakByEntityListener(this);
		new CraftZPaintingPlaceListener(this);
		
		// WEATHER
		new CraftZWeatherChangeListener(this);
		
	}
	
	
	
	
	private void registerZombieSpawner() {
		cz_zs = new CraftZZombieSpawner();
		initZSHashMap();
	}
	
	private void spawnZombie() {
		cz_zs.spawn(this);
	}
	
	private void initZSHashMap() {
		
		zs_hm.clear();
		Set<String> spzDataKeys = this.getConfig().getConfigurationSection("Spawnpoints.zombies").getKeys(false);
		int spzDKSize = spzDataKeys.size();
		double multiplier = 1 / spzDKSize;
		int forNumber = 1;
		for (String spzKey : spzDataKeys) {
			double spzNumber = forNumber * multiplier;
			zs_hm.put(spzNumber, spzKey);
		}
		
	}
	
	Map<Double, String> zs_hm = new HashMap<Double, String>();
	private CraftZZombieSpawner cz_zs;
	
	
	
	
	private void registerChestRefiller() {
		cz_cr = new CraftZChestRefiller();
	}
	
	private void refillChests() {
		cz_cr.refill(this);
	}
	
	private CraftZChestRefiller cz_cr;
	
	
}